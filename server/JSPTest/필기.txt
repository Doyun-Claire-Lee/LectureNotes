JSP, Java Server Pages
- 서블릿의 다음 버전

#서블릿의 장점
- 자바를 사용할 수 있음(자바 기반)

#서블릿의 단점
- HTML, CSS, JavaScript 작성이 힘듬(문자열로 작성해야 하기 때문에)

#JSP 장점
- HTML, CSS, JavaScript 작성이 쉬움(웹페이지 기반)

#JSP 단점
- 자바 작업이 불편하다. > 툴 기능이 부족함


#JSP 기본 요소
1. JSP 지시자(지시어), JSP Directive
2. 스트립트 요소, Scripting Elements
3. 액션 태그, Action Tags


1. JSP 지시자(지시어), JSP Directive
	- 표기법 : <%@ XXX %>
	- JSP 페이지를 실행하기 위해 JSP 컨테이너(톰캣)에게 해당 JSP를 처리하기 위한 여러가지 환경 설정을 한다.
		a. page 지시자
		b. include 지시자
		c. taglib 지시자
		

2. 스트립트 요소, Scripting Elements
	- 표기법: <% %>
	- 자바 구문을 쓸 수 있게 해준다.(자바 환경을 만들어줌)
		a. 스크립틀릿, Scriptlet(Script + Applet)
		b. 표현식, Expression
		c. 선언부, Declaration
		
3. 액션 태그, Action Tags
	- 표기법:  <jsp:XXX>, <c:XXX>
	- 프로그래밍 기능을 하는 태그
	- <c:if>, <c:forEach>
		a. JSP 기본 액션 태그
		b. JSTL 확장 액션 태그
		c. 사용자 커스텀 액션 태그


#page 지시자
- <%@ page 속성="값" 속성="값" 속성="값".. %>
- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

a. language
	- JSP페이지에서 사용할 프로그래밍 언어 지정
	
b. contentType
	- 현재 페이지 콘텐츠에 대한 기술
	- contentType="text/html; charset=UTF-8"		//현재 개발환경, encoding 설정 변경시
	- contentType="text/html; charset=ISO-8859-1"	//기본값
	- text/html : MIME Type 열거형, 웹서버가 브라우저에게 웹 페이지를 전달할 때 이 페이지는 이런 형식의 페이지라는것을 알려주는 역할
	- text/html, image/jpeg, image/png, image/gif 등...
	- charset : 웹서버가 현재 JSP 페이지를 해석할 때 사용할 인코딩 방식

c. pageEncoding 
	- 웹서버가 브라우저에게 페이지를 해석할 때 사용할 인코딩 방식을 알려주는것

d. import 
	- 패키지 or 클래스 참조
	- 자바의 import와 동일한 역할

e. session

f. buffer

g. autoFlush

h. info

i. errorPage
	- 에러 페이지로 사용할 페이지 URL 지정 

#include 지시자
- <%@ include file="URL" %>
- 특정 JSP/HTML 페이지를 해당 JSP 페이지의 일부 영역에 삽입하는 기술
- 조각 페이지 -> 그러나 클라이언트에게 보낼 때는 한 장이 됨!! 
- <iframe> 태그와 유사한 역할


#taglib 지시자
- 액션 태그에서 사용 



#스크립트 요소
스크립틀릿, Scriptlet(Script + Applet)
- ex05_scriptlet.jsp
- <% %>
- 이 영역은 자바 영역이라는 것을 표시
- 비즈니스 코드 작업
	a. 데이터 가공/처리(Oracle)
	b. 동적 HTML(CSS, JavaScript)
- 사용 빈도 높음


표현식, Expression
- <%= 값 %>
- 값: 변수, 상수, 메소드 반환값 등...
- 출력 목적 : HTML의 소스 일부를 작성하기 위해서(****)
- ex06_expression.jsp

선언부, Declaration
- <%! %>
- 현재 JSP 페이지에서 사용할 변수와 메소드를 선언하는 영역
- 잘 사용 안함(불편하기 때문)
- ex07_declaration.jsp







****서블릿 동작 순서****
- 서블릿은 서블릿 컨테이너(ex:톰캣)가 생성부터 소멸까지를 관리하고 운영한다.

1. 사용자 URL 요청 -> HTTP Request 발생

2. 아파치에 요청 전달 -> 확장자 판단

3. 아파치가 자체적으로 처리가 불가하여 요청을 톰캣에게 전달
	- 사전에 웹 서버측에 [URL + 서블릿]로 미리 매핑되어 있는 내용이 배포서술자(Deployment Descriptor, web.xml)에 등록이 되어있어야 함.

4. Test.java 검색

5. 컴파일 유무 확인 후 컴파일(javac.exe)

6. 실행(Run - java.exe)

7. 메모리 영역에 서블릿 인스턴스 생성됨

8. request, response 객체 생성
	- 톰캣이 요청에 따른 처리를 하기 위해서 HttpServletRequest, HttpServletResponse 객체를 생성한다.
	
9. 서블릿의 service() 메소드 호출
	- service() 메소드 내에서 현재 요청 방식이 GET or POST 방식인지를 판단
	- GET -> doGet() 호출 + 8번 객체를 같이 전달 
	- POST -> doPost() 호출 + 8번 객체를 같이 전달
	
10. doGet()/doPost() 메소드 호출
	- HTML 페이지를 동적으로 생성함. + PrintWriter 객체 이용
	- 개발자가 대부분 코드를 작성하는 영역
	
11. HTTP Response
	- 10번에서 만든 HTMl 페이지를 response 객체에 담아 웹서버(아파치)에게 전달한다. (톰캣이)
	- 이 순간 페이지를 만드는 데 사용했던 모든 자원(request, response 객체)을 소멸시킨다.(**************************)
	- 서블릿 인스턴스는 소멸되지 않아 재요청 시에는 컴파일 작업을 생략하게 된다.
	
12. 아파치
	- 전달받은 HTML 페이지를 브라우저에게 전달한다.
	
13. 브라우저 실행 



#동적으로 HTML 페이지를 만드는 역할
- Servlet : 알바생
- JSP : 알바생
- JSP 페이지는 자바 클래스이다.

 
JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하진 않지만 JSP컨테이너(톰캣)가 미리 만들어서 제공하는 객체
- 예약어로 취급해도 됨.
- JSP 내장 객체는 서블릿에도 동일하게 존재한다.
- request, response, session, pageContext, out, application, config, page, exception
- request, response, session, pageContext (************)
- out, application (******)
- request, session, pageContext, application : 내부에 사용자 데이터를 저장할 수 있는 Map을 가지고 있다.
											 : setAttribute(key, value), getAttribute(Key)
	a. request
		- 전송된 데이터 가져오기
		- 전송된 데이터 인코딩
		- 전송된 관련된 정보 가져오기 
		
	b. response
		- 임시 페이지 만들기(서블릿일때: response.getWriter() -> printWriter)
		- 페이지 이동하기  
		- 페이지 인코딩
	
	c. pageContext
		- javax.servlet.jsp.PageContext
		- 페이지 실행에 필요한 컨텍스트 정보를 저장한 객체
		- 페이지 이동
		- 데이터 전달(request객체 이용, 보조 역할)

	d. out
		- 응답 페이지 전송을 위한 출력 스트림 객체
		- 서블릿 PrintWriter 유사 객체 
		- 자바 스크립틀릿 안에서 HTML 출력 
		- 출력 버퍼 제어(특수 상황에서만 이용하는 기능)	
		
	e. application
		- 웹 어플리케이션의 여러가지 정보 제공
		- 모든 접속자들이 공유하는 데이터 저장 공간을 제공
		- 모든 접속자들이 접속을 종료할때까지 동일한 객체가 유지됨 
		
	f. session (*********************************************************************************************************)
		- 클라이언트 세션(접속 시점 ~ 종료 시점) 정보를 관리하는 객체
		- 사용자가 접속중일 때 사용자와 관련된 정보를 저장하는 용도(******)
		- 개인용 정보 저장(다른 사람이 접근 불가능)(******)
		- 상태가 지속됨.(******)
		- 유저가 서버에 접속하는 순간 유저의 정보를 저장하기 위한 객체가 생성되는데, 이 객체가 바로 session임.
		- 마치 자바의 전역(Static)변수와 비슷 
		- 유저가 서버에서 페이지를 얻어간 후 일정 시간(타이머)이 지나면 유저가 접속을 종료했다고 판단하여 해당 유저의 세션 객체가 소멸됨.
		

내장 객체의 데이터 입출력
- pageContext, request, session, application
- setAttribution(key, value), getAttributiton(key)
- 4개의 내장 객체는 각각 생명 주기가 서로 다르다. (****)
- ex18_one.jsp ~ ex18 three.jsp



#액션 태그, Action Tag
- 프로그래밍 기능이 있는 태그
- JSP : HTML기반, 자바 코드를 삽입하는 형태로 사용(스크립틀릿 이용) -> 스파게티 코드 발생 -> 가독성 저하 -> 자바를 사용하지 말자!! -> 자바를 대체할만한 또다른 문법 생성 -> 가독성 향상 -> 액션 태그!
- XML기반

	a. JSP 액션 태그(기본) - 잘 사용되지 않음
	b. JSTL 액션 태그(확장) - 메인
	c. 사용자 정의 태그(커스텀)	- 수업X
	
	
#JSP 액션 태그(기본)
- forward
- include	


#EL, Expression Language
- <%= %> : Expression(자바 표현식)
- HTML 문서에 원하는 내용을 출력하는 역할
- 자바를 사용하지 않고 가독성 높은 새로운 언어를 사용
- ${출력내용}
- 출력 데이터가 제한되어있음. 
- 출력 데이터 : 내장 객체(pageContext, request, session, application)에 담긴 데이터만 출력이 가능하다. 즉, setAttribute로 저장한 데이터만 출력이 가능함.
	
#JSPL 액션 태그(확장)
- jstl.jar 설치 필수
- https://apache.org/
- http://tomcat.apache.org/taglibs/standard/
- JSP(tm) Standard Tag Library




	
#지금까지의 JSP 
- JSP Model 1 : JSP페이지 기반(스클립틀릿을 사용해서 자바 구문을 표현하는 방식)
	
#지금부터의 JSP
- JSP Model 2(MVC): JSP + Servlet 

#디자인 패턴(GoF) 
- MVC, Model View Controller
- 대부분의 웹 프로그래밍은 MVC 패턴을 이용함.
		
#
1. 서블릿 : 자바 기반 + HTML 삽입
2. JSP : HTML 기반 + 자바 삽입
3. 서블릿 + JSP : 서블릿(자바) + JSP(HTML)	
		

#주소록 제작하기(***여러번 연습해서 외우기)

- CRUD
- MVC기반
- Oracle	




#파일 업로드/다운로드
ex22_form.java

		