/*

데이터베이스 구축
- 요구분석 + 데이터수집 -> 다량의 데이터 발생 -> 저장하기 위한 데이터베이스의 조직화된 구조 필요 -> 설계/구축

1. 데이터베이스 모델링
2. 데이터베이스 설계
3. 데이터베이스 구축


1. 데이베이스 모델링
    - 가장 초반에 하는 작업
    - 가장 중요한 작업
    - 설계도 작업(****) 
    - 요구분석 -> 데이터베이스 구성을 위한 정보(raw data) 수집 -> 분석 -> 가공 -> 저장구조 도식화(설계도) = ERD(최종 산출물)
    - 이 단계에서는 DBMS의 종류가 결정되진 않음. (이론상)

2. 데이터베이스 설계
    - 실제 사용할 DBMS를 결정한다. (ex.오라클)
    - 모델링 결과물(ERD)를 구체화하는 작업을 진행(ex.오라클에 맞게 세분화)
    - 식별자 생성, 자료형 지정, 제약사항 추가 등.. (이론상)
    - 데이터베이스 설계의 산출물 : 스크립트(*.sql) + DDL
    
3. 데이터베이스 구축
    - 모델링, 설계 결과를 토대로 현실화시켜 물리적으로 생성하는 작업
    - SQL사용 + 구조 생성 + 데이터 생성



<<데이터베이스 모델링>>

용어
1. ERD, Entity Relation Diagram
    - 엔티티간의 관계를 표현한 그림
    - 데이터베이스 모델링 기법 중 하나, 대표적인 방법
    - 손, 오피스, 전문툴(exERD, SQP Developer, *ER-WIN* 등)

2. Entity, 엔티티
    - 다른 Entity와 분류(구분)될 수 있고, 다른 Entity와 정해진 관계를 맺을 수 있는 데이터 단위
    - 그냥 테이블이라 생각하면 됨.. (+ 레코드 개념) 
    - java의 클래스, 파일의 폴더와 같은 느낌
    ex) 회사의 정보관리 프로그램
            a. 사원 정보 관리
                - 필요 정보 : 사원명, 나이, 연락처, 주소, 사원번호 등....
                - 집합으로 만들 수 있는 데이터에 이름을 붙임. (사원명, 나이, 연락처, 주소, 사원번호) -> '사원'
                - 여기서의 '사원'이 바로 entity임. 
            b. 부서 정보 관리
                - 필요 정보 : 부서명, 부서 번호, 사무실 번호, 내선번호 등...
                - 부서명, 부서 번호, 사무실 번호, 내선번호 -> '부서'
                
3. Entity Relationship, 엔티티 관계
    - 엔티티간의 관계
    - 테이블간의 관계
    
4. Attribute, 속성(특성)
    - 엔티티가 가지는 특성
    - 엔티티를 구성하는 요소
    - 엔티티를 만들기 위해서 하나로 모였던 정보들
    ex) 사원 엔티티 = 사원명 속성 + 사원번호 속성 + 연락처 속성 + 주소 속성 등...
    

ERD에서 Entity, Attribute, Relationship 등을 표현하는 방법(그림 그리는 방법)
1. Entity를 그리는 방법
    - 사각형으로 표시
    - 이름 작성(한글 권장, 영어 (대문자권장))
    - 중복 불가능
    - 보통 단수로 표시
    
2. Attribute
    - 엔티티 안에 표시(목록 형태)
    - 파스칼 표기법 or 전부 소문자 표기 -> 따로 정해져 있지 않음. 다양함
    - 단수로 표시 
    - 추가 표기사항(** 속성에 대한 특징 기술)
        a. NN, not null, *
        b. ND, not duplicate, # : unique
        ex) 중복값X, 생략X 속성인 경우 = '#* 속성명'
               중복값O, 생략X 속성인 경우 = '* 속성명'
               중복값X, 생략O 속성인 경우 = '# 속성명'
               중복값O, 생략O 속성인 경우 = '속성명' or 'o 속성명' (o: optional)
               
3. Relationship
    - 가장 중요한 작업
    - 엔티티와 엔티티간의 관계 표시(행과 행간의 관계, PK와 FK의 관계)
    - 관계의 패턴(종류)
        A엔티티  : B 엔티티
        a. 1 : 1
            - 하나의 A는 하나의 B와 관계
        b. 1 : 0
            - 하나의 A는 0개의 B와 관계 ==> 무관계
        c. 1 : N
            - 하나의 A는 하나 이상의 B와 관계
        d. 1 : N
            - 하나의 A는 0개 이상의 B와 관계
            
4. 키, Key
    - 속성, 컬럼
    - 여러가지 역할을 부여할 수 있다.
    
    a. 기본 키, Primary key(NN, ND)
        - 레코드와 레코드를 구분하는 역할, 식별자(***)
        - 테이블에는 기본키가 반드시 존재해야 한다.
    
    b. 후보키, Candidate key
        - 레코드와 레코드를 구분하는 역할
        - 후보키들 중 대표로 선발된 키 -> Primary key
        - 탈락된 키 -> 후보키?
        - 후보키 = 기본키 + 대체키
        
    c. 대체키, Alternate key
        - 후보키들 중 기본키를 제외한 나머지 키
    
    d. 슈퍼키, Super key
        - 복합키, Composite key
        - 한개의 키만을 가지고 식별자 역할이 불가능한 경우에, 2개 이상의 키를 조합해서 기본키로 만듦.
    
    e. 외래키, Foreign key
        - 부모 테이블의 기본 키를 참조하는 키
        - 테이블의 관계를 만드는 역할(*****)
        
     f. 일반키
        - a~e중 아무것에도 해당되지 않는 키


ERD 종류
1. 논리 다이어그램, Logical Diagram
    - 업무를 설명하기 위한 ERD, 데이터의 성격 + 관계 표시
    - 모든 식별자를 한글로 정의
    - 설계 단계 + 업무 정의 단계
    - (진짜 설계도가 아님) 
    
2. 물리 다이어그램, Physical Diagram
    - 실제 데이터베이스에 적용하기 위한 ERD
    - 모든 식별자가 실제 DB에 적합한 이름으로 표시(영문)
    - 자료형 명시, 제약사향 표시
    - 구현 단계
    































*/

